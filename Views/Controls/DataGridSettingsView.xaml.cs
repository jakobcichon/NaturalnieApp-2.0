using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace NaturalnieApp2.Views.Controls
{
    /// <summary>
    /// Interaction logic for DataGridSettingsView.xaml
    /// </summary>
    public partial class DataGridSettingsView : UserControl, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;
        public ObservableCollection<ItemTemplate> Items { get;}

        private Visibility _visibility;
        public Visibility MenuPanelVisibility
        {
            get { return _visibility; }
            set 
            { 
                _visibility = value;
                OnPropertyChanged(nameof(MenuPanelVisibility));
            }
        }

        static readonly DependencyProperty ReferenceDataGridProperty = DependencyProperty.Register("ReferenceDataGrid",
            typeof(DataGridNaturalnieApp), typeof(DataGridSettingsView), new PropertyMetadata(new PropertyChangedCallback(OnReferenceDataGridChange)));

        public DataGridNaturalnieApp ReferenceDataGrid
        {
            get 
            { 
                return (DataGridNaturalnieApp)GetValue(ReferenceDataGridProperty); 
            }
            set 
            {
                SetValue(ReferenceDataGridProperty, value);
            }
        }

        private static void OnReferenceDataGridChange(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            DataGridSettingsView? currentInstance = d as DataGridSettingsView;
            if (currentInstance == null) return;
            
            currentInstance.OnDataGridReferenceChange();
        }


        public DataGridSettingsView()
        {
            InitializeComponent();
            Items = new ObservableCollection<ItemTemplate>();

            DataContext = this;

            HideMenuPanel();
        }

        public void OnDataGridReferenceChange()
        {
            if (ReferenceDataGrid == null) return;

            ReferenceDataGrid.AutoGeneratedColumns += ReferenceDataGrid_AutoGeneratedColumns;

            UpdateReference();


        }

        private void ReferenceDataGrid_AutoGeneratedColumns(object? sender, EventArgs e)
        {
            UpdateReference();
        }

        public void UpdateReference()
        {
            if (ReferenceDataGrid != null)
            {
                Items.Clear();
                foreach (DataGridColumn column in ReferenceDataGrid.Columns)
                {
                    Items.Add(new ItemTemplate(column));
                }
            }
        }

        private void HideMenuPanel()
        {
            MenuPanelVisibility = Visibility.Hidden;
        }

        private void ShowMenuPanel()
        {
            MenuPanelVisibility = Visibility.Visible;
        }

        private void OpenMenuButton_Click(object sender, RoutedEventArgs e)
        {
            if (MenuPanelVisibility == Visibility.Visible)
            {
                HideMenuPanel();
                return;
            }
            ShowMenuPanel();
        }

        public void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }



        private class MenuButtonCommandClass: ICommand
        {
            public event EventHandler? CanExecuteChanged;

            public bool CanExecute(object? parameter)
            {
                return true;
            }

            public void Execute(object? parameter)
            {
                ItemTemplate item = parameter as ItemTemplate;

                if (item == null) return;
                if (item.Column == null) return;

                if(item.ColumnVisibility == Visibility.Visible)
                {
                    item.ColumnVisibility = Visibility.Hidden;
                    return;
                }

                item.ColumnVisibility = Visibility.Visible;
            }
        }

        public class ItemTemplate: INotifyPropertyChanged
        {
            public DataGridColumn Column { get; set; }
            public string DisplayName { get; set; }
            private Visibility _columnVisibility;

            public Visibility ColumnVisibility
            {
                get { return _columnVisibility; }
                set 
                { 
                    _columnVisibility = value;
                    if (Column != null) Column.Visibility = _columnVisibility;
                    OnPropertyChanged(nameof(ColumnVisibility));
                }
            }

            public ICommand MenuButtonCommand { get; set; }

            public ItemTemplate()
            {
                MenuButtonCommand = new MenuButtonCommandClass();
            }

            public ItemTemplate(DataGridColumn column)
            {
                if (column == null) throw new ArgumentNullException("column");

                Column = column;
                DisplayName = Column.Header as string;
                ColumnVisibility = Column.Visibility;
                MenuButtonCommand = new MenuButtonCommandClass();
            }

            public event PropertyChangedEventHandler? PropertyChanged;

            public void OnPropertyChanged(string propertyName)
            {
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void UserControl_MouseLeave(object sender, MouseEventArgs e)
        {
            HideMenuPanel();
        }
    }
}
